package ch.hurz.webcollab.client.messaging;

import ch.hurz.webcollab.client.LoginFailureException;
import ch.hurz.webcollab.client.MessagingService;
import ch.hurz.webcollab.client.MessagingServiceAsync;

import com.google.gwt.appengine.channel.client.Channel;
import com.google.gwt.appengine.channel.client.ChannelFactory;
import com.google.gwt.appengine.channel.client.ChannelFactory.ChannelCreatedCallback;
import com.google.gwt.appengine.channel.client.SocketError;
import com.google.gwt.appengine.channel.client.SocketListener;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;

public class MessagingModel {

	private final MessagingServiceAsync greetingService = GWT
			.create(MessagingService.class);

	public void login(final String name, final String password) throws LoginFailureException {
		greetingService.login(name, password, new AsyncCallback<String>() {

			@Override
			public void onSuccess(final String result) {
				// TODO Auto-generated method stub

			}

			@Override
			public void onFailure(final Throwable caught) {
				// TODO Auto-generated method stub

			}
		});

		ChannelFactory.createChannel("sdf", new ChannelCreatedCallback() {

			@Override
			public void onChannelCreated(final Channel channel) {
				channel.open(new SocketListener() {
					@Override
					public void onOpen() {
						Window.alert("Channel opened!");
					}

					@Override
					public void onMessage(final String message) {
						Window.alert("Received: " + message);
					}

					@Override
					public void onError(final SocketError error) {
						Window.alert("Error: " + error.getDescription());
					}

					@Override
					public void onClose() {
						Window.alert("Channel closed!");
					}
				});
			}
		});
	}

}
